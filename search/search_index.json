{"config":{"lang":["en","ru"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sync-Numbers Documentation","text":"\ud83d\ude80 REST API Gateway for AI Contact Transfer Integration <p>A secure, production-ready FastAPI service for seamless contact synchronization with AI</p>"},{"location":"#what-is-sync-numbers","title":"\ud83c\udf1f What is Sync-Numbers?","text":"<p>Sync-Numbers is a robust API gateway that bridges your systems with our AI models, providing enterprise-grade contact transfer capabilities with built-in validation, idempotency, and observability.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\u2705 Phone Validation &amp; Normalization - Validates and normalizes phone numbers to E.164 format \u2705 Idempotency - Prevents duplicate processing with 72h TTL \u2705 Authentication - Bearer token + optional HMAC signatures \u2705 Automatic Chunking - Splits large batches (max 1000 contacts per chunk) \u2705 Smart Retry Logic - Exponential backoff for 429/5xx errors \u2705 Dry-Run Mode - Test validation without sending data \u2705 Full Observability - Structured logging, Prometheus metrics, correlation IDs \u2705 Security First - PII masking, IP allowlists, HTTPS-only  </p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li> <p> API Reference</p> <p>Complete API documentation with authentication, endpoints, and examples</p> <p> API Guide</p> </li> <li> <p> Code Examples</p> <p>Practical examples in Python, JavaScript, and cURL</p> <p> Examples</p> </li> </ul>"},{"location":"#quick-example","title":"\ud83d\ude80 Quick Example","text":"<pre><code>import httpx\nimport uuid\n\nasync def import_contacts():\n    headers = {\n        \"Authorization\": \"Bearer demo_api_key_12345\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    contacts = [{\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"lead\", \"website\"],\n        \"additionalFields\": {\n            \"source\": \"landing\",\n            \"campaign\": \"summer2024\"\n        }\n    }]\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://import-api.liddex.ru/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        return response.json()\n</code></pre>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>graph LR\n    A[Partner System] --&gt;|HTTPS/JSON| B[Sync API]\n    B --&gt;|HTTPS/JSON| C[AI Webhook]\n    B --&gt;|Store| D[(PostgreSQL)]\n    style B fill:#4051b5,stroke:#fff,color:#fff</code></pre>"},{"location":"#available-languages","title":"\ud83d\udcd6 Available Languages","text":"<p>This documentation is available in multiple languages:</p> <ul> <li> English (Current)</li> <li> \u0420\u0443\u0441\u0441\u043a\u0438\u0439</li> </ul>"},{"location":"#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>Interactive API Docs: https://import-api.liddex.ru/docs</li> </ul>"},{"location":"#support","title":"\ud83c\udd98 Support","text":"<p>Need help? Here's how to get support:</p> <ol> <li>Check the API Guide for common issues</li> <li>Review the Integration Guide for technical details</li> <li>Include <code>correlation_id</code> when reporting issues</li> <li>Contact your integration support team</li> </ol> <p>Made with \u2764\ufe0f for seamless contact transfer integration</p>"},{"location":"API_GUIDE/","title":"API Guide - Sync Integration","text":"<p>Complete guide for integrating with Sync REST API for contact transfer to AI.</p>"},{"location":"API_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Authentication</li> <li>Headers</li> <li>Idempotency</li> <li>HMAC Signature (Optional)</li> <li>Endpoints</li> <li>Error Handling</li> <li>Rate Limiting</li> <li>Examples</li> </ul>"},{"location":"API_GUIDE/#authentication","title":"Authentication","text":"<p>All API requests require authentication using Bearer token in the <code>Authorization</code> header.</p> <pre><code>Authorization: Bearer YOUR_API_KEY\n</code></pre>"},{"location":"API_GUIDE/#obtaining-api-keys","title":"Obtaining API Keys","text":"<p>Contact your administrator to obtain an API key. Keep your API key secure and never commit it to version control.</p>"},{"location":"API_GUIDE/#headers","title":"Headers","text":""},{"location":"API_GUIDE/#required-headers","title":"Required Headers","text":"Header Description Example <code>Authorization</code> Bearer token for authentication <code>Bearer abc123...</code> <code>Idempotency-Key</code> Unique identifier for request deduplication UUID v4 <code>Content-Type</code> Must be <code>application/json</code> <code>application/json</code>"},{"location":"API_GUIDE/#optional-headers","title":"Optional Headers","text":"Header Description Example <code>X-Correlation-ID</code> Request tracing identifier (auto-generated if not provided) UUID v4 <code>X-Debug</code> Enable dry-run mode (no data sent to AI) <code>true</code> <code>X-Signature</code> HMAC signature (if enabled) Hex string <code>X-Timestamp</code> Request timestamp for HMAC (RFC3339) <code>2024-01-15T12:00:00Z</code>"},{"location":"API_GUIDE/#idempotency","title":"Idempotency","text":"<p>All <code>POST /v1/contacts/import</code> requests must include an <code>Idempotency-Key</code> header to prevent duplicate processing.</p>"},{"location":"API_GUIDE/#how-it-works","title":"How It Works","text":"<ol> <li>First Request: Server processes the request and stores the response associated with the idempotency key.</li> <li>Replay (Same Payload): Server returns the stored response without reprocessing.</li> <li>Conflict (Different Payload): Server returns <code>422 Unprocessable Entity</code> error.</li> </ol>"},{"location":"API_GUIDE/#best-practices","title":"Best Practices","text":"<ul> <li>Use UUID v4 for idempotency keys</li> <li>Store keys on your side to enable retries</li> <li>Keys are valid for 72 hours (configurable)</li> </ul>"},{"location":"API_GUIDE/#example","title":"Example","text":"<pre><code>curl -X POST https://import-api.liddex.ru/v1/contacts/import \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Idempotency-Key: 550e8400-e29b-41d4-a716-446655440000\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[{\"phone\": \"+79001234567\", \"tags\": [\"test\"], \"additionalFields\": {}}]'\n</code></pre>"},{"location":"API_GUIDE/#hmac-signature-optional","title":"HMAC Signature (Optional)","text":"<p>If HMAC validation is enabled for your API client, you must include signature headers.</p>"},{"location":"API_GUIDE/#generating-signature","title":"Generating Signature","text":"<ol> <li>Construct message: <code>timestamp + \"\\n\" + request_body</code></li> <li>Compute HMAC-SHA256: <code>HMAC(secret, message)</code></li> <li>Encode as hex string</li> </ol>"},{"location":"API_GUIDE/#python-example","title":"Python Example","text":"<pre><code>import hmac\nimport hashlib\nfrom datetime import datetime, timezone\n\ndef generate_signature(secret: str, timestamp: str, body: bytes) -&gt; str:\n    message = f\"{timestamp}\\n\".encode() + body\n    signature = hmac.new(\n        secret.encode(),\n        message,\n        hashlib.sha256\n    ).hexdigest()\n    return signature\n\n# Usage\ntimestamp = datetime.now(timezone.utc).isoformat()\nbody = b'[{\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}}]'\nsignature = generate_signature(\"your-secret\", timestamp, body)\n\nheaders = {\n    \"X-Signature\": signature,\n    \"X-Timestamp\": timestamp,\n}\n</code></pre>"},{"location":"API_GUIDE/#javascript-example","title":"JavaScript Example","text":"<pre><code>const crypto = require('crypto');\n\nfunction generateSignature(secret, timestamp, body) {\n    const message = timestamp + '\\n' + body;\n    return crypto\n        .createHmac('sha256', secret)\n        .update(message)\n        .digest('hex');\n}\n\n// Usage\nconst timestamp = new Date().toISOString();\nconst body = JSON.stringify([{phone: \"+79001234567\", tags: [], additionalFields: {}}]);\nconst signature = generateSignature('your-secret', timestamp, body);\n</code></pre>"},{"location":"API_GUIDE/#endpoints","title":"Endpoints","text":""},{"location":"API_GUIDE/#post-v1contactsimport","title":"POST /v1/contacts/import","text":"<p>Import contacts for transfer to AI.</p> <p>Request Body: Single object or array of contact objects.</p> <pre><code>{\n  \"phone\": \"79001234567\",\n  \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n  \"additionalFields\": {\n    \"source\": \"website\",\n    \"campaign\": \"summer2024\"\n  }\n}\n</code></pre> <p>Or array:</p> <pre><code>[\n  {\n    \"phone\": \"+79001234567\",\n    \"tags\": [\"\u043b\u0438\u0434\"],\n    \"additionalFields\": {\"source\": \"website\"}\n  },\n  {\n    \"phone\": \"89001234568\",\n    \"tags\": [\"\u043a\u043b\u0438\u0435\u043d\u0442\"],\n    \"additionalFields\": {}\n  }\n]\n</code></pre> <p>Response (202 Accepted):</p> <pre><code>{\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"correlation_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"idempotency_status\": \"created\",\n  \"status\": \"pending\",\n  \"total_contacts\": 2,\n  \"valid_contacts\": 2,\n  \"invalid_contacts\": 0,\n  \"chunks_count\": 1,\n  \"created_at\": \"2024-01-15T12:00:00Z\"\n}\n</code></pre> <p>Debug Mode Response (200 OK when <code>X-Debug: true</code>):</p> <pre><code>{\n  \"correlation_id\": \"...\",\n  \"total_contacts\": 2,\n  \"valid_contacts\": 1,\n  \"invalid_contacts\": 1,\n  \"chunks_count\": 1,\n  \"validation_results\": [\n    {\n      \"original_phone\": \"+79001234567\",\n      \"normalized_phone\": \"+79001234567\",\n      \"is_valid\": true,\n      \"error\": null,\n      \"tags\": [\"\u043b\u0438\u0434\"],\n      \"additional_fields\": {}\n    },\n    {\n      \"original_phone\": \"invalid\",\n      \"normalized_phone\": null,\n      \"is_valid\": false,\n      \"error\": \"Invalid phone number\",\n      \"tags\": [],\n      \"additional_fields\": {}\n    }\n  ],\n  \"chunks\": [\n    {\n      \"chunk_index\": 0,\n      \"size\": 1,\n      \"contacts\": [...]\n    }\n  ],\n  \"message\": \"Dry-run mode: no data sent to AI\"\n}\n</code></pre>"},{"location":"API_GUIDE/#get-v1contactsimportjob_id","title":"GET /v1/contacts/import/{job_id}","text":"<p>Get status of an import job.</p> <p>Response (200 OK):</p> <pre><code>{\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"correlation_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"status\": \"completed\",\n  \"total_contacts\": 100,\n  \"valid_contacts\": 95,\n  \"invalid_contacts\": 5,\n  \"sent_contacts\": 95,\n  \"failed_contacts\": 0,\n  \"chunks_total\": 1,\n  \"chunks_completed\": 1,\n  \"chunks_failed\": 0,\n  \"chunks_pending\": 0,\n  \"chunks\": [\n    {\n      \"chunk_index\": 0,\n      \"status\": \"sent\",\n      \"size\": 95,\n      \"attempt_count\": 1,\n      \"last_attempt_at\": \"2024-01-15T12:01:00Z\",\n      \"sent_at\": \"2024-01-15T12:01:00Z\",\n      \"response_status_code\": 200,\n      \"error_message\": null\n    }\n  ],\n  \"created_at\": \"2024-01-15T12:00:00Z\",\n  \"updated_at\": \"2024-01-15T12:01:00Z\",\n  \"completed_at\": \"2024-01-15T12:01:00Z\",\n  \"error_message\": null\n}\n</code></pre>"},{"location":"API_GUIDE/#get-v1idempotencykey","title":"GET /v1/idempotency/{key}","text":"<p>Retrieve stored result for an idempotency key.</p> <p>Response (200 OK):</p> <pre><code>{\n  \"key\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"status\": \"active\",\n  \"payload_hash\": \"abc123...\",\n  \"job_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"created_at\": \"2024-01-15T12:00:00Z\",\n  \"accessed_at\": \"2024-01-15T12:05:00Z\",\n  \"access_count\": 3,\n  \"expires_at\": \"2024-01-18T12:00:00Z\",\n  \"original_status_code\": 202,\n  \"original_response\": {...}\n}\n</code></pre>"},{"location":"API_GUIDE/#get-healthz","title":"GET /healthz","text":"<p>Basic health check (no dependencies).</p> <p>Response (200 OK):</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"checks\": {}\n}\n</code></pre>"},{"location":"API_GUIDE/#get-readyz","title":"GET /readyz","text":"<p>Readiness check (includes database connectivity).</p> <p>Response (200 OK):</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"checks\": {\n    \"database\": {\n      \"status\": \"healthy\",\n      \"message\": \"Database connection OK\"\n    }\n  }\n}\n</code></pre>"},{"location":"API_GUIDE/#error-handling","title":"Error Handling","text":""},{"location":"API_GUIDE/#http-status-codes","title":"HTTP Status Codes","text":"Code Meaning Action 200 OK Success (debug mode, status queries) 202 Accepted Job accepted for processing 400 Bad Request Fix validation errors 401 Unauthorized Check API key 403 Forbidden Check permissions/IP allowlist 404 Not Found Check job ID or idempotency key 422 Unprocessable Entity Idempotency conflict - use different key 429 Too Many Requests Slow down, retry with backoff 500 Internal Server Error Contact support"},{"location":"API_GUIDE/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": \"error_code\",\n  \"message\": \"Human-readable error description\",\n  \"details\": {...}\n}\n</code></pre>"},{"location":"API_GUIDE/#common-errors","title":"Common Errors","text":"<p>Missing Idempotency Key: <pre><code>{\n  \"error\": \"validation_error\",\n  \"message\": \"Idempotency-Key header is required\"\n}\n</code></pre></p> <p>Invalid Phone Number: <pre><code>{\n  \"error\": \"validation_error\",\n  \"message\": \"Request validation failed\",\n  \"details\": [...]\n}\n</code></pre></p> <p>Idempotency Conflict: <pre><code>{\n  \"error\": \"idempotency_conflict\",\n  \"message\": \"Idempotency key reused with different payload\",\n  \"existing_created_at\": \"2024-01-15T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"API_GUIDE/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Rate limits are configurable per API client</li> <li>Default: 10 requests per second</li> <li>Exceeded limits return <code>429 Too Many Requests</code></li> <li>Implement exponential backoff for retries</li> </ul>"},{"location":"API_GUIDE/#examples","title":"Examples","text":""},{"location":"API_GUIDE/#curl-example","title":"cURL Example","text":"<pre><code>#!/bin/bash\n\nAPI_KEY=\"your-api-key-here\"\nBASE_URL=\"https://import-api.liddex.ru\"\nIDEMPOTENCY_KEY=$(uuidgen)\n\ncurl -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: ${IDEMPOTENCY_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n    {\n      \"phone\": \"+79001234567\",\n      \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n      \"additionalFields\": {\n        \"source\": \"landing\",\n        \"campaign\": \"winter2024\"\n      }\n    }\n  ]'\n</code></pre>"},{"location":"API_GUIDE/#python-example_1","title":"Python Example","text":"<pre><code>import httpx\nimport uuid\n\nAPI_KEY = \"your-api-key-here\"\nBASE_URL = \"https://import-api.liddex.ru\"\n\nasync def import_contacts(contacts: list):\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage\ncontacts = [\n    {\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"\u043b\u0438\u0434\"],\n        \"additionalFields\": {\"source\": \"api\"}\n    }\n]\n\nresult = await import_contacts(contacts)\nprint(f\"Job ID: {result['job_id']}\")\n</code></pre>"},{"location":"API_GUIDE/#javascriptnodejs-example","title":"JavaScript/Node.js Example","text":"<pre><code>const axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\nconst API_KEY = 'your-api-key-here';\nconst BASE_URL = 'https://import-api.liddex.ru';\n\nasync function importContacts(contacts) {\n    const response = await axios.post(\n        `${BASE_URL}/v1/contacts/import`,\n        contacts,\n        {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Idempotency-Key': uuidv4(),\n                'Content-Type': 'application/json',\n            }\n        }\n    );\n    return response.data;\n}\n\n// Usage\nconst contacts = [\n    {\n        phone: '+79001234567',\n        tags: ['\u043b\u0438\u0434'],\n        additionalFields: {source: 'api'}\n    }\n];\n\nimportContacts(contacts)\n    .then(result =&gt; console.log('Job ID:', result.job_id))\n    .catch(error =&gt; console.error('Error:', error.message));\n</code></pre>"},{"location":"API_GUIDE/#support","title":"Support","text":"<p>For questions or issues: - Check logs using <code>correlation_id</code> for tracing - Review error messages and details - Contact your integration support team</p>"},{"location":"EXAMPLES/","title":"Usage Examples","text":"<p>Practical examples for integrating with Sync API.</p>"},{"location":"EXAMPLES/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Python Examples</li> <li>JavaScript/Node.js Examples</li> <li>cURL Examples</li> <li>Error Handling</li> <li>Advanced Usage</li> </ul>"},{"location":"EXAMPLES/#python-examples","title":"Python Examples","text":""},{"location":"EXAMPLES/#basic-import","title":"Basic Import","text":"<pre><code>import httpx\nimport uuid\nimport asyncio\n\nAPI_KEY = \"your-api-key\"\nBASE_URL = \"https://import-api.liddex.ru\"\n\nasync def import_contacts(contacts: list[dict]) -&gt; dict:\n    \"\"\"Import contacts to AI.\"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n            timeout=30.0,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage\ncontacts = [\n    {\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n        \"additionalFields\": {\n            \"source\": \"landing\",\n            \"campaign\": \"summer2024\",\n        }\n    },\n    {\n        \"phone\": \"89001234568\",\n        \"tags\": [\"\u043a\u043b\u0438\u0435\u043d\u0442\"],\n        \"additionalFields\": {\n            \"source\": \"referral\",\n        }\n    }\n]\n\nresult = asyncio.run(import_contacts(contacts))\nprint(f\"Job ID: {result['job_id']}\")\nprint(f\"Valid contacts: {result['valid_contacts']}\")\n</code></pre>"},{"location":"EXAMPLES/#polling-job-status","title":"Polling Job Status","text":"<pre><code>async def wait_for_job_completion(\n    job_id: str,\n    max_wait: int = 300,\n    poll_interval: int = 5\n) -&gt; dict:\n    \"\"\"Poll job status until completion or timeout.\"\"\"\n    headers = {\"Authorization\": f\"Bearer {API_KEY}\"}\n    elapsed = 0\n\n    async with httpx.AsyncClient() as client:\n        while elapsed &lt; max_wait:\n            response = await client.get(\n                f\"{BASE_URL}/v1/contacts/import/{job_id}\",\n                headers=headers,\n            )\n            response.raise_for_status()\n            status = response.json()\n\n            if status[\"status\"] in [\"completed\", \"failed\"]:\n                return status\n\n            await asyncio.sleep(poll_interval)\n            elapsed += poll_interval\n\n    raise TimeoutError(f\"Job {job_id} did not complete within {max_wait}s\")\n\n# Usage\nresult = asyncio.run(import_contacts(contacts))\nfinal_status = asyncio.run(wait_for_job_completion(result[\"job_id\"]))\nprint(f\"Status: {final_status['status']}\")\nprint(f\"Sent: {final_status['sent_contacts']}/{final_status['valid_contacts']}\")\n</code></pre>"},{"location":"EXAMPLES/#with-hmac-signature","title":"With HMAC Signature","text":"<pre><code>import hmac\nimport hashlib\nfrom datetime import datetime, timezone\n\ndef generate_hmac_signature(secret: str, timestamp: str, body: bytes) -&gt; str:\n    \"\"\"Generate HMAC-SHA256 signature.\"\"\"\n    message = f\"{timestamp}\\n\".encode() + body\n    return hmac.new(secret.encode(), message, hashlib.sha256).hexdigest()\n\nasync def import_with_hmac(contacts: list[dict], hmac_secret: str) -&gt; dict:\n    \"\"\"Import contacts with HMAC signature.\"\"\"\n    timestamp = datetime.now(timezone.utc).isoformat()\n    body = json.dumps(contacts).encode()\n    signature = generate_hmac_signature(hmac_secret, timestamp, body)\n\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"X-Signature\": signature,\n        \"X-Timestamp\": timestamp,\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            content=body,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"EXAMPLES/#debug-mode-dry-run","title":"Debug Mode (Dry-Run)","text":"<pre><code>async def validate_contacts(contacts: list[dict]) -&gt; dict:\n    \"\"\"Validate contacts without sending to AI.\"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"X-Debug\": \"true\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# Usage\nresult = asyncio.run(validate_contacts([\n    {\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}},\n    {\"phone\": \"invalid\", \"tags\": [], \"additionalFields\": {}},\n]))\n\nprint(f\"Valid: {result['valid_contacts']}\")\nprint(f\"Invalid: {result['invalid_contacts']}\")\n\nfor contact in result['validation_results']:\n    if not contact['is_valid']:\n        print(f\"Error: {contact['original_phone']} - {contact['error']}\")\n</code></pre>"},{"location":"EXAMPLES/#javascriptnodejs-examples","title":"JavaScript/Node.js Examples","text":""},{"location":"EXAMPLES/#basic-import_1","title":"Basic Import","text":"<pre><code>const axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\nconst API_KEY = 'your-api-key';\nconst BASE_URL = 'https://import-api.liddex.ru';\n\nasync function importContacts(contacts) {\n    const response = await axios.post(\n        `${BASE_URL}/v1/contacts/import`,\n        contacts,\n        {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Idempotency-Key': uuidv4(),\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000,\n        }\n    );\n    return response.data;\n}\n\n// Usage\nconst contacts = [\n    {\n        phone: '+79001234567',\n        tags: ['\u043b\u0438\u0434', '\u0441\u0430\u0439\u0442'],\n        additionalFields: {\n            source: 'landing',\n            campaign: 'summer2024',\n        }\n    }\n];\n\nimportContacts(contacts)\n    .then(result =&gt; {\n        console.log('Job ID:', result.job_id);\n        console.log('Valid contacts:', result.valid_contacts);\n    })\n    .catch(error =&gt; {\n        console.error('Error:', error.response?.data || error.message);\n    });\n</code></pre>"},{"location":"EXAMPLES/#with-retry-logic","title":"With Retry Logic","text":"<pre><code>const axios = require('axios');\nconst axiosRetry = require('axios-retry');\n\nconst client = axios.create({\n    baseURL: BASE_URL,\n    timeout: 30000,\n});\n\n// Configure retry\naxiosRetry(client, {\n    retries: 3,\n    retryDelay: axiosRetry.exponentialDelay,\n    retryCondition: (error) =&gt; {\n        // Retry on network errors or 5xx\n        return axiosRetry.isNetworkOrIdempotentRequestError(error) ||\n               (error.response &amp;&amp; error.response.status &gt;= 500);\n    },\n});\n\nasync function importContactsWithRetry(contacts) {\n    const response = await client.post('/v1/contacts/import', contacts, {\n        headers: {\n            'Authorization': `Bearer ${API_KEY}`,\n            'Idempotency-Key': uuidv4(),\n            'Content-Type': 'application/json',\n        },\n    });\n    return response.data;\n}\n</code></pre>"},{"location":"EXAMPLES/#typescript-example","title":"TypeScript Example","text":"<pre><code>import axios, { AxiosInstance } from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Contact {\n    phone: string;\n    tags: string[];\n    additionalFields: Record&lt;string, any&gt;;\n}\n\ninterface ImportResponse {\n    job_id: string;\n    correlation_id: string;\n    idempotency_status: string;\n    status: string;\n    total_contacts: number;\n    valid_contacts: number;\n    invalid_contacts: number;\n    chunks_count: number;\n    created_at: string;\n}\n\nclass SyncSashaClient {\n    private client: AxiosInstance;\n\n    constructor(apiKey: string, baseURL: string = 'https://import-api.liddex.ru') {\n        this.client = axios.create({\n            baseURL,\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000,\n        });\n    }\n\n    async importContacts(contacts: Contact[]): Promise&lt;ImportResponse&gt; {\n        const response = await this.client.post&lt;ImportResponse&gt;(\n            '/v1/contacts/import',\n            contacts,\n            {\n                headers: {\n                    'Idempotency-Key': uuidv4(),\n                },\n            }\n        );\n        return response.data;\n    }\n\n    async getJobStatus(jobId: string): Promise&lt;any&gt; {\n        const response = await this.client.get(`/v1/contacts/import/${jobId}`);\n        return response.data;\n    }\n}\n\n// Usage\nconst client = new SyncSashaClient('your-api-key');\n\nconst contacts: Contact[] = [\n    {\n        phone: '+79001234567',\n        tags: ['test'],\n        additionalFields: { source: 'typescript' },\n    }\n];\n\nclient.importContacts(contacts)\n    .then(result =&gt; console.log('Job ID:', result.job_id))\n    .catch(error =&gt; console.error('Error:', error.message));\n</code></pre>"},{"location":"EXAMPLES/#curl-examples","title":"cURL Examples","text":""},{"location":"EXAMPLES/#basic-import_2","title":"Basic Import","text":"<pre><code>#!/bin/bash\n\nAPI_KEY=\"your-api-key\"\nBASE_URL=\"https://import-api.liddex.ru\"\nIDEMPOTENCY_KEY=$(uuidgen)\n\ncurl -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: ${IDEMPOTENCY_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n    {\n      \"phone\": \"+79001234567\",\n      \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n      \"additionalFields\": {\n        \"source\": \"landing\",\n        \"campaign\": \"summer2024\"\n      }\n    }\n  ]'\n</code></pre>"},{"location":"EXAMPLES/#save-job-id-and-check-status","title":"Save Job ID and Check Status","text":"<pre><code>#!/bin/bash\n\n# Import and extract job ID\nRESPONSE=$(curl -s -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: $(uuidgen)\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[{\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}}]')\n\nJOB_ID=$(echo $RESPONSE | jq -r '.job_id')\necho \"Job ID: $JOB_ID\"\n\n# Wait and check status\nsleep 5\n\ncurl -s -X GET \"${BASE_URL}/v1/contacts/import/${JOB_ID}\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" | jq\n</code></pre>"},{"location":"EXAMPLES/#error-handling","title":"Error Handling","text":""},{"location":"EXAMPLES/#python","title":"Python","text":"<pre><code>from httpx import HTTPStatusError\n\nasync def import_with_error_handling(contacts: list[dict]) -&gt; dict:\n    try:\n        return await import_contacts(contacts)\n    except HTTPStatusError as e:\n        if e.response.status_code == 400:\n            print(\"Validation error:\", e.response.json())\n        elif e.response.status_code == 401:\n            print(\"Authentication failed - check API key\")\n        elif e.response.status_code == 422:\n            print(\"Idempotency conflict - key reused with different data\")\n        elif e.response.status_code == 429:\n            print(\"Rate limit exceeded - retry later\")\n        else:\n            print(f\"Unexpected error: {e.response.status_code}\")\n        raise\n</code></pre>"},{"location":"EXAMPLES/#javascript","title":"JavaScript","text":"<pre><code>async function importWithErrorHandling(contacts) {\n    try {\n        return await importContacts(contacts);\n    } catch (error) {\n        if (error.response) {\n            const status = error.response.status;\n            const data = error.response.data;\n\n            switch (status) {\n                case 400:\n                    console.error('Validation error:', data);\n                    break;\n                case 401:\n                    console.error('Authentication failed - check API key');\n                    break;\n                case 422:\n                    console.error('Idempotency conflict:', data);\n                    break;\n                case 429:\n                    console.error('Rate limit exceeded - retry later');\n                    break;\n                default:\n                    console.error(`Unexpected error: ${status}`, data);\n            }\n        } else {\n            console.error('Network error:', error.message);\n        }\n        throw error;\n    }\n}\n</code></pre>"},{"location":"EXAMPLES/#advanced-usage","title":"Advanced Usage","text":""},{"location":"EXAMPLES/#batch-processing","title":"Batch Processing","text":"<pre><code>async def import_in_batches(\n    all_contacts: list[dict],\n    batch_size: int = 1000,\n) -&gt; list[str]:\n    \"\"\"Import contacts in batches.\"\"\"\n    job_ids = []\n\n    for i in range(0, len(all_contacts), batch_size):\n        batch = all_contacts[i:i + batch_size]\n        result = await import_contacts(batch)\n        job_ids.append(result['job_id'])\n\n        print(f\"Batch {i // batch_size + 1}: Job {result['job_id']}\")\n\n        # Rate limiting\n        await asyncio.sleep(0.5)\n\n    return job_ids\n</code></pre>"},{"location":"EXAMPLES/#monitoring-progress","title":"Monitoring Progress","text":"<pre><code>async def monitor_jobs(job_ids: list[str]) -&gt; dict:\n    \"\"\"Monitor multiple jobs.\"\"\"\n    results = {\"completed\": 0, \"failed\": 0, \"pending\": 0}\n\n    async with httpx.AsyncClient() as client:\n        for job_id in job_ids:\n            response = await client.get(\n                f\"{BASE_URL}/v1/contacts/import/{job_id}\",\n                headers={\"Authorization\": f\"Bearer {API_KEY}\"},\n            )\n            status = response.json()\n\n            if status[\"status\"] == \"completed\":\n                results[\"completed\"] += 1\n            elif status[\"status\"] == \"failed\":\n                results[\"failed\"] += 1\n            else:\n                results[\"pending\"] += 1\n\n    return results\n</code></pre>"},{"location":"EXAMPLES/#see-also","title":"See Also","text":"<ul> <li>API Guide - Complete API reference</li> <li>Integration Guide - Technical details</li> </ul>"},{"location":"ru/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Sync-Numbers","text":"\ud83d\ude80 REST API \u0448\u043b\u044e\u0437 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0441 AI <p>\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439, \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043a production \u0441\u0435\u0440\u0432\u0438\u0441 \u043d\u0430 FastAPI \u0434\u043b\u044f \u0431\u0435\u0441\u0448\u043e\u0432\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0441 AI</p>"},{"location":"ru/#sync-numbers_1","title":"\ud83c\udf1f \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Sync-Numbers?","text":"<p>Sync-Numbers \u2014 \u044d\u0442\u043e \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 API \u0448\u043b\u044e\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u0448\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441 \u043d\u0430\u0448\u0438\u043c\u0438 \u0418\u0418 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0441\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439, \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e.</p>"},{"location":"ru/#_1","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>\u2705 \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 - \u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 E.164 \u2705 \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c - \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441 TTL 72 \u0447\u0430\u0441\u0430 \u2705 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f - Bearer \u0442\u043e\u043a\u0435\u043d + \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u2705 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 - \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b (\u043c\u0430\u043a\u0441. 1000 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u043d\u0430 \u0447\u0430\u043d\u043a) \u2705 \u0423\u043c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 - \u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0442\u0441\u0440\u043e\u0447\u043a\u0430 \u0434\u043b\u044f \u043e\u0448\u0438\u0431\u043e\u043a 429/5xx \u2705 \u0420\u0435\u0436\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u2705 \u041f\u043e\u043b\u043d\u0430\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0441\u0442\u044c - \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043b\u043e\u0433\u0438, \u043c\u0435\u0442\u0440\u0438\u043a\u0438 Prometheus, correlation ID \u2705 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0432\u044b\u0448\u0435 \u0432\u0441\u0435\u0433\u043e - \u041c\u0430\u0441\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PII, \u0431\u0435\u043b\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 IP, \u0442\u043e\u043b\u044c\u043a\u043e HTTPS  </p>"},{"location":"ru/#_2","title":"\ud83d\udcda \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<ul> <li> <p> \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a API</p> <p>\u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0441 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439, \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438</p> <p> \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API</p> </li> <li> <p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python, JavaScript \u0438 cURL</p> <p> \u041f\u0440\u0438\u043c\u0435\u0440\u044b</p> </li> </ul>"},{"location":"ru/#_3","title":"\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import httpx\nimport uuid\n\nasync def import_contacts():\n    headers = {\n        \"Authorization\": \"Bearer demo_api_key_12345\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    contacts = [{\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n        \"additionalFields\": {\n            \"source\": \"landing\",\n            \"campaign\": \"summer2024\"\n        }\n    }]\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://import-api.liddex.ru/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        return response.json()\n</code></pre>"},{"location":"ru/#_4","title":"\ud83c\udfd7\ufe0f \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<pre><code>graph LR\n    A[\u041f\u0430\u0440\u0442\u043d\u0451\u0440\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430] --&gt;|HTTPS/JSON| B[Sync API]\n    B --&gt;|HTTPS/JSON| C[AI Webhook]\n    B --&gt;|\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435| D[(PostgreSQL)]\n    style B fill:#4051b5,stroke:#fff,color:#fff</code></pre>"},{"location":"ru/#_5","title":"\ud83d\udcd6 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438","text":"<p>\u042d\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445:</p> <ul> <li> English</li> <li> \u0420\u0443\u0441\u0441\u043a\u0438\u0439 (\u0422\u0435\u043a\u0443\u0449\u0438\u0439)</li> </ul>"},{"location":"ru/#_6","title":"\ud83d\udd17 \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>\u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API: https://import-api.liddex.ru/docs</li> </ul>"},{"location":"ru/#_7","title":"\ud83c\udd98 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430","text":"<p>\u041d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c? \u0412\u043e\u0442 \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443:</p> <ol> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c</li> <li>\u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0435\u0442\u0430\u043b\u0435\u0439</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 <code>correlation_id</code> \u043f\u0440\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0445</li> <li>\u0421\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c \u0441 \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438</li> </ol> <p>\u0421\u0434\u0435\u043b\u0430\u043d\u043e \u0441 \u2764\ufe0f \u0434\u043b\u044f \u0431\u0435\u0441\u0448\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432</p>"},{"location":"ru/API_GUIDE/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API - \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Sync","text":"<p>\u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 REST API Sync \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0432 AI.</p>"},{"location":"ru/API_GUIDE/#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f</li> <li>\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438</li> <li>\u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c</li> <li>HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u044c (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)</li> <li>\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a</li> <li>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b</li> </ul>"},{"location":"ru/API_GUIDE/#_2","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":"<p>\u0412\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a API \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Bearer-\u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 <code>Authorization</code>.</p> <pre><code>Authorization: Bearer \u0412\u0410\u0428_API_\u041a\u041b\u042e\u0427\n</code></pre>"},{"location":"ru/API_GUIDE/#api","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u043a\u043b\u044e\u0447\u0435\u0439","text":"<p>\u0421\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c \u0441 \u0432\u0430\u0448\u0438\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f API \u043a\u043b\u044e\u0447\u0430. \u0425\u0440\u0430\u043d\u0438\u0442\u0435 API \u043a\u043b\u044e\u0447 \u0432 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044c\u0442\u0435 \u0435\u0433\u043e \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439.</p>"},{"location":"ru/API_GUIDE/#_3","title":"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438","text":""},{"location":"ru/API_GUIDE/#_4","title":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438","text":"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 <code>Authorization</code> Bearer \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 <code>Bearer abc123...</code> <code>Idempotency-Key</code> \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0434\u0435\u0434\u0443\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 UUID v4 <code>Content-Type</code> \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c <code>application/json</code> <code>application/json</code>"},{"location":"ru/API_GUIDE/#_5","title":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438","text":"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 <code>X-Correlation-ID</code> \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d) UUID v4 <code>X-Debug</code> \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 AI) <code>true</code> <code>X-Signature</code> HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u044c (\u0435\u0441\u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430) Hex \u0441\u0442\u0440\u043e\u043a\u0430 <code>X-Timestamp</code> \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f HMAC (RFC3339) <code>2024-01-15T12:00:00Z</code>"},{"location":"ru/API_GUIDE/#_6","title":"\u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0412\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b <code>POST /v1/contacts/import</code> \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a <code>Idempotency-Key</code> \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"ru/API_GUIDE/#_7","title":"\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442","text":"<ol> <li>\u041f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441: \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438.</li> <li>\u041f\u043e\u0432\u0442\u043e\u0440 (\u0442\u043e\u0442 \u0436\u0435 payload): \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> <li>\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 (\u0434\u0440\u0443\u0433\u043e\u0439 payload): \u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 <code>422 Unprocessable Entity</code>.</li> </ol>"},{"location":"ru/API_GUIDE/#_8","title":"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 UUID v4 \u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438</li> <li>\u0425\u0440\u0430\u043d\u0438\u0442\u0435 \u043a\u043b\u044e\u0447\u0438 \u0443 \u0441\u0435\u0431\u044f \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a</li> <li>\u041a\u043b\u044e\u0447\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 72 \u0447\u0430\u0441\u043e\u0432 (\u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f)</li> </ul>"},{"location":"ru/API_GUIDE/#_9","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>curl -X POST https://import-api.liddex.ru/v1/contacts/import \\\n  -H \"Authorization: Bearer \u0412\u0410\u0428_API_\u041a\u041b\u042e\u0427\" \\\n  -H \"Idempotency-Key: 550e8400-e29b-41d4-a716-446655440000\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[{\"phone\": \"+79001234567\", \"tags\": [\"\u0442\u0435\u0441\u0442\"], \"additionalFields\": {}}]'\n</code></pre>"},{"location":"ru/API_GUIDE/#hmac","title":"HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u044c (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)","text":"<p>\u0415\u0441\u043b\u0438 HMAC \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e API \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0438.</p>"},{"location":"ru/API_GUIDE/#_10","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438","text":"<ol> <li>\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: <code>timestamp + \"\\n\" + request_body</code></li> <li>\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c HMAC-SHA256: <code>HMAC(secret, message)</code></li> <li>\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a hex \u0441\u0442\u0440\u043e\u043a\u0443</li> </ol>"},{"location":"ru/API_GUIDE/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>import hmac\nimport hashlib\nfrom datetime import datetime, timezone\n\ndef generate_signature(secret: str, timestamp: str, body: bytes) -&gt; str:\n    message = f\"{timestamp}\\n\".encode() + body\n    signature = hmac.new(\n        secret.encode(),\n        message,\n        hashlib.sha256\n    ).hexdigest()\n    return signature\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ntimestamp = datetime.now(timezone.utc).isoformat()\nbody = b'[{\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}}]'\nsignature = generate_signature(\"your-secret\", timestamp, body)\n\nheaders = {\n    \"X-Signature\": signature,\n    \"X-Timestamp\": timestamp,\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#javascript","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 JavaScript","text":"<pre><code>const crypto = require('crypto');\n\nfunction generateSignature(secret, timestamp, body) {\n    const message = timestamp + '\\n' + body;\n    return crypto\n        .createHmac('sha256', secret)\n        .update(message)\n        .digest('hex');\n}\n\n// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nconst timestamp = new Date().toISOString();\nconst body = JSON.stringify([{phone: \"+79001234567\", tags: [], additionalFields: {}}]);\nconst signature = generateSignature('your-secret', timestamp, body);\n</code></pre>"},{"location":"ru/API_GUIDE/#_11","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":""},{"location":"ru/API_GUIDE/#post-v1contactsimport","title":"POST /v1/contacts/import","text":"<p>\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 AI.</p> <p>\u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \u041e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432.</p> <pre><code>{\n  \"phone\": \"79001234567\",\n  \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n  \"additionalFields\": {\n    \"source\": \"website\",\n    \"campaign\": \"summer2024\"\n  }\n}\n</code></pre> <p>\u0418\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432:</p> <pre><code>[\n  {\n    \"phone\": \"+79001234567\",\n    \"tags\": [\"\u043b\u0438\u0434\"],\n    \"additionalFields\": {\"source\": \"website\"}\n  },\n  {\n    \"phone\": \"89001234568\",\n    \"tags\": [\"\u043a\u043b\u0438\u0435\u043d\u0442\"],\n    \"additionalFields\": {}\n  }\n]\n</code></pre> <p>\u041e\u0442\u0432\u0435\u0442 (202 Accepted):</p> <pre><code>{\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"correlation_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"idempotency_status\": \"created\",\n  \"status\": \"pending\",\n  \"total_contacts\": 2,\n  \"valid_contacts\": 2,\n  \"invalid_contacts\": 0,\n  \"chunks_count\": 1,\n  \"created_at\": \"2024-01-15T12:00:00Z\"\n}\n</code></pre> <p>\u041e\u0442\u0432\u0435\u0442 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u043e\u0442\u043b\u0430\u0434\u043a\u0438 (200 OK \u043a\u043e\u0433\u0434\u0430 <code>X-Debug: true</code>):</p> <pre><code>{\n  \"correlation_id\": \"...\",\n  \"total_contacts\": 2,\n  \"valid_contacts\": 1,\n  \"invalid_contacts\": 1,\n  \"chunks_count\": 1,\n  \"validation_results\": [\n    {\n      \"original_phone\": \"+79001234567\",\n      \"normalized_phone\": \"+79001234567\",\n      \"is_valid\": true,\n      \"error\": null,\n      \"tags\": [\"\u043b\u0438\u0434\"],\n      \"additional_fields\": {}\n    },\n    {\n      \"original_phone\": \"invalid\",\n      \"normalized_phone\": null,\n      \"is_valid\": false,\n      \"error\": \"Invalid phone number\",\n      \"tags\": [],\n      \"additional_fields\": {}\n    }\n  ],\n  \"chunks\": [\n    {\n      \"chunk_index\": 0,\n      \"size\": 1,\n      \"contacts\": [...]\n    }\n  ],\n  \"message\": \"\u0420\u0435\u0436\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0432 AI\"\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#get-v1contactsimportjob_id","title":"GET /v1/contacts/import/{job_id}","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0430.</p> <p>\u041e\u0442\u0432\u0435\u0442 (200 OK):</p> <pre><code>{\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"correlation_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"status\": \"completed\",\n  \"total_contacts\": 100,\n  \"valid_contacts\": 95,\n  \"invalid_contacts\": 5,\n  \"sent_contacts\": 95,\n  \"failed_contacts\": 0,\n  \"chunks_total\": 1,\n  \"chunks_completed\": 1,\n  \"chunks_failed\": 0,\n  \"chunks_pending\": 0,\n  \"chunks\": [\n    {\n      \"chunk_index\": 0,\n      \"status\": \"sent\",\n      \"size\": 95,\n      \"attempt_count\": 1,\n      \"last_attempt_at\": \"2024-01-15T12:01:00Z\",\n      \"sent_at\": \"2024-01-15T12:01:00Z\",\n      \"response_status_code\": 200,\n      \"error_message\": null\n    }\n  ],\n  \"created_at\": \"2024-01-15T12:00:00Z\",\n  \"updated_at\": \"2024-01-15T12:01:00Z\",\n  \"completed_at\": \"2024-01-15T12:01:00Z\",\n  \"error_message\": null\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#get-v1idempotencykey","title":"GET /v1/idempotency/{key}","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043a\u043b\u044e\u0447\u0443 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438.</p> <p>\u041e\u0442\u0432\u0435\u0442 (200 OK):</p> <pre><code>{\n  \"key\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"status\": \"active\",\n  \"payload_hash\": \"abc123...\",\n  \"job_id\": \"660e8400-e29b-41d4-a716-446655440001\",\n  \"created_at\": \"2024-01-15T12:00:00Z\",\n  \"accessed_at\": \"2024-01-15T12:05:00Z\",\n  \"access_count\": 3,\n  \"expires_at\": \"2024-01-18T12:00:00Z\",\n  \"original_status_code\": 202,\n  \"original_response\": {...}\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#get-healthz","title":"GET /healthz","text":"<p>\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f (\u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439).</p> <p>\u041e\u0442\u0432\u0435\u0442 (200 OK):</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"checks\": {}\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#get-readyz","title":"GET /readyz","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438 (\u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445).</p> <p>\u041e\u0442\u0432\u0435\u0442 (200 OK):</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2024-01-15T12:00:00Z\",\n  \"checks\": {\n    \"database\": {\n      \"status\": \"healthy\",\n      \"message\": \"Database connection OK\"\n    }\n  }\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#_12","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"ru/API_GUIDE/#http","title":"HTTP \u043a\u043e\u0434\u044b \u0441\u0442\u0430\u0442\u0443\u0441\u0430","text":"\u041a\u043e\u0434 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 200 OK \u0423\u0441\u043f\u0435\u0445 (\u0440\u0435\u0436\u0438\u043c \u043e\u0442\u043b\u0430\u0434\u043a\u0438, \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0442\u0430\u0442\u0443\u0441\u0430) 202 Accepted \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0438\u043d\u044f\u0442\u0430 \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 400 Bad Request \u0418\u0441\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 401 Unauthorized \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 API \u043a\u043b\u044e\u0447 403 Forbidden \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430/IP \u0431\u0435\u043b\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a 404 Not Found \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 ID \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043a\u043b\u044e\u0447 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 422 Unprocessable Entity \u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043b\u044e\u0447 429 Too Many Requests \u0421\u043d\u0438\u0437\u044c\u0442\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u0443, \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u0441 \u043e\u0442\u0441\u0440\u043e\u0447\u043a\u043e\u0439 500 Internal Server Error \u0421\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439"},{"location":"ru/API_GUIDE/#_13","title":"\u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u0448\u0438\u0431\u043a\u0438","text":"<pre><code>{\n  \"error\": \"error_code\",\n  \"message\": \"\u0427\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\",\n  \"details\": {...}\n}\n</code></pre>"},{"location":"ru/API_GUIDE/#_14","title":"\u0427\u0430\u0441\u0442\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438","text":"<p>\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438: <pre><code>{\n  \"error\": \"validation_error\",\n  \"message\": \"\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a Idempotency-Key\"\n}\n</code></pre></p> <p>\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430: <pre><code>{\n  \"error\": \"validation_error\",\n  \"message\": \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\",\n  \"details\": [...]\n}\n</code></pre></p> <p>\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438: <pre><code>{\n  \"error\": \"idempotency_conflict\",\n  \"message\": \"\u041a\u043b\u044e\u0447 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0441 \u0434\u0440\u0443\u0433\u0438\u043c payload\",\n  \"existing_created_at\": \"2024-01-15T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"ru/API_GUIDE/#_15","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<ul> <li>\u041b\u0438\u043c\u0438\u0442\u044b \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e API \u043a\u043b\u0438\u0435\u043d\u0442\u0430</li> <li>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 10 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</li> <li>\u041f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f <code>429 Too Many Requests</code></li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u043e\u0442\u0441\u0440\u043e\u0447\u043a\u0443 \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432</li> </ul>"},{"location":"ru/API_GUIDE/#_16","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":""},{"location":"ru/API_GUIDE/#curl","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 cURL","text":"<pre><code>#!/bin/bash\n\nAPI_KEY=\"\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447\"\nBASE_URL=\"https://import-api.liddex.ru\"\nIDEMPOTENCY_KEY=$(uuidgen)\n\ncurl -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: ${IDEMPOTENCY_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n    {\n      \"phone\": \"+79001234567\",\n      \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n      \"additionalFields\": {\n        \"source\": \"landing\",\n        \"campaign\": \"winter2024\"\n      }\n    }\n  ]'\n</code></pre>"},{"location":"ru/API_GUIDE/#python_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>import httpx\nimport uuid\n\nAPI_KEY = \"\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447\"\nBASE_URL = \"https://import-api.liddex.ru\"\n\nasync def import_contacts(contacts: list):\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ncontacts = [\n    {\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"\u043b\u0438\u0434\"],\n        \"additionalFields\": {\"source\": \"api\"}\n    }\n]\n\nresult = await import_contacts(contacts)\nprint(f\"ID \u0437\u0430\u0434\u0430\u0447\u0438: {result['job_id']}\")\n</code></pre>"},{"location":"ru/API_GUIDE/#javascriptnodejs","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 JavaScript/Node.js","text":"<pre><code>const axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\nconst API_KEY = '\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447';\nconst BASE_URL = 'https://import-api.liddex.ru';\n\nasync function importContacts(contacts) {\n    const response = await axios.post(\n        `${BASE_URL}/v1/contacts/import`,\n        contacts,\n        {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Idempotency-Key': uuidv4(),\n                'Content-Type': 'application/json',\n            }\n        }\n    );\n    return response.data;\n}\n\n// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nconst contacts = [\n    {\n        phone: '+79001234567',\n        tags: ['\u043b\u0438\u0434'],\n        additionalFields: {source: 'api'}\n    }\n];\n\nimportContacts(contacts)\n    .then(result =&gt; console.log('ID \u0437\u0430\u0434\u0430\u0447\u0438:', result.job_id))\n    .catch(error =&gt; console.error('\u041e\u0448\u0438\u0431\u043a\u0430:', error.message));\n</code></pre>"},{"location":"ru/API_GUIDE/#_17","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430","text":"<p>\u041f\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c \u0438\u043b\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u043c: - \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043b\u043e\u0433\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>correlation_id</code> \u0434\u043b\u044f \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0438 - \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u0434\u0435\u0442\u0430\u043b\u0438 - \u0421\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c \u0441 \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438</p>"},{"location":"ru/EXAMPLES/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 API Sync.</p>"},{"location":"ru/EXAMPLES/#_2","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 JavaScript/Node.js</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 cURL</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"ru/EXAMPLES/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python","text":""},{"location":"ru/EXAMPLES/#_3","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0438\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>import httpx\nimport uuid\nimport asyncio\n\nAPI_KEY = \"\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447\"\nBASE_URL = \"https://import-api.liddex.ru\"\n\nasync def import_contacts(contacts: list[dict]) -&gt; dict:\n    \"\"\"\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0432 AI.\"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n            timeout=30.0,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ncontacts = [\n    {\n        \"phone\": \"+79001234567\",\n        \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n        \"additionalFields\": {\n            \"source\": \"landing\",\n            \"campaign\": \"summer2024\",\n        }\n    },\n    {\n        \"phone\": \"89001234568\",\n        \"tags\": [\"\u043a\u043b\u0438\u0435\u043d\u0442\"],\n        \"additionalFields\": {\n            \"source\": \"referral\",\n        }\n    }\n]\n\nresult = asyncio.run(import_contacts(contacts))\nprint(f\"ID \u0437\u0430\u0434\u0430\u0447\u0438: {result['job_id']}\")\nprint(f\"\u0412\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432: {result['valid_contacts']}\")\n</code></pre>"},{"location":"ru/EXAMPLES/#_4","title":"\u041e\u043f\u0440\u043e\u0441 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<pre><code>async def wait_for_job_completion(\n    job_id: str,\n    max_wait: int = 300,\n    poll_interval: int = 5\n) -&gt; dict:\n    \"\"\"\u041e\u043f\u0440\u043e\u0441 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430.\"\"\"\n    headers = {\"Authorization\": f\"Bearer {API_KEY}\"}\n    elapsed = 0\n\n    async with httpx.AsyncClient() as client:\n        while elapsed &lt; max_wait:\n            response = await client.get(\n                f\"{BASE_URL}/v1/contacts/import/{job_id}\",\n                headers=headers,\n            )\n            response.raise_for_status()\n            status = response.json()\n\n            if status[\"status\"] in [\"completed\", \"failed\"]:\n                return status\n\n            await asyncio.sleep(poll_interval)\n            elapsed += poll_interval\n\n    raise TimeoutError(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {job_id} \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0430\u0441\u044c \u0437\u0430 {max_wait}\u0441\")\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nresult = asyncio.run(import_contacts(contacts))\nfinal_status = asyncio.run(wait_for_job_completion(result[\"job_id\"]))\nprint(f\"\u0421\u0442\u0430\u0442\u0443\u0441: {final_status['status']}\")\nprint(f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e: {final_status['sent_contacts']}/{final_status['valid_contacts']}\")\n</code></pre>"},{"location":"ru/EXAMPLES/#hmac","title":"\u0421 HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e","text":"<pre><code>import hmac\nimport hashlib\nfrom datetime import datetime, timezone\nimport json\n\ndef generate_hmac_signature(secret: str, timestamp: str, body: bytes) -&gt; str:\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f HMAC-SHA256 \u043f\u043e\u0434\u043f\u0438\u0441\u0438.\"\"\"\n    message = f\"{timestamp}\\n\".encode() + body\n    return hmac.new(secret.encode(), message, hashlib.sha256).hexdigest()\n\nasync def import_with_hmac(contacts: list[dict], hmac_secret: str) -&gt; dict:\n    \"\"\"\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0441 HMAC \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e.\"\"\"\n    timestamp = datetime.now(timezone.utc).isoformat()\n    body = json.dumps(contacts).encode()\n    signature = generate_hmac_signature(hmac_secret, timestamp, body)\n\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"X-Signature\": signature,\n        \"X-Timestamp\": timestamp,\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            content=body,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"ru/EXAMPLES/#dry-run","title":"\u0420\u0435\u0436\u0438\u043c \u043e\u0442\u043b\u0430\u0434\u043a\u0438 (Dry-Run)","text":"<pre><code>async def validate_contacts(contacts: list[dict]) -&gt; dict:\n    \"\"\"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0432 AI.\"\"\"\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Idempotency-Key\": str(uuid.uuid4()),\n        \"X-Debug\": \"true\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            f\"{BASE_URL}/v1/contacts/import\",\n            json=contacts,\n            headers=headers,\n        )\n        response.raise_for_status()\n        return response.json()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nresult = asyncio.run(validate_contacts([\n    {\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}},\n    {\"phone\": \"invalid\", \"tags\": [], \"additionalFields\": {}},\n]))\n\nprint(f\"\u0412\u0430\u043b\u0438\u0434\u043d\u044b\u0445: {result['valid_contacts']}\")\nprint(f\"\u041d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445: {result['invalid_contacts']}\")\n\nfor contact in result['validation_results']:\n    if not contact['is_valid']:\n        print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {contact['original_phone']} - {contact['error']}\")\n</code></pre>"},{"location":"ru/EXAMPLES/#javascriptnodejs","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 JavaScript/Node.js","text":""},{"location":"ru/EXAMPLES/#_5","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0438\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>const axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\nconst API_KEY = '\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447';\nconst BASE_URL = 'https://import-api.liddex.ru';\n\nasync function importContacts(contacts) {\n    const response = await axios.post(\n        `${BASE_URL}/v1/contacts/import`,\n        contacts,\n        {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Idempotency-Key': uuidv4(),\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000,\n        }\n    );\n    return response.data;\n}\n\n// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nconst contacts = [\n    {\n        phone: '+79001234567',\n        tags: ['\u043b\u0438\u0434', '\u0441\u0430\u0439\u0442'],\n        additionalFields: {\n            source: 'landing',\n            campaign: 'summer2024',\n        }\n    }\n];\n\nimportContacts(contacts)\n    .then(result =&gt; {\n        console.log('ID \u0437\u0430\u0434\u0430\u0447\u0438:', result.job_id);\n        console.log('\u0412\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432:', result.valid_contacts);\n    })\n    .catch(error =&gt; {\n        console.error('\u041e\u0448\u0438\u0431\u043a\u0430:', error.response?.data || error.message);\n    });\n</code></pre>"},{"location":"ru/EXAMPLES/#_6","title":"\u0421 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432","text":"<pre><code>const axios = require('axios');\nconst axiosRetry = require('axios-retry');\n\nconst client = axios.create({\n    baseURL: BASE_URL,\n    timeout: 30000,\n});\n\n// \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\naxiosRetry(client, {\n    retries: 3,\n    retryDelay: axiosRetry.exponentialDelay,\n    retryCondition: (error) =&gt; {\n        // \u041f\u043e\u0432\u0442\u043e\u0440 \u043f\u0440\u0438 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438\u043b\u0438 5xx\n        return axiosRetry.isNetworkOrIdempotentRequestError(error) ||\n               (error.response &amp;&amp; error.response.status &gt;= 500);\n    },\n});\n\nasync function importContactsWithRetry(contacts) {\n    const response = await client.post('/v1/contacts/import', contacts, {\n        headers: {\n            'Authorization': `Bearer ${API_KEY}`,\n            'Idempotency-Key': uuidv4(),\n            'Content-Type': 'application/json',\n        },\n    });\n    return response.data;\n}\n</code></pre>"},{"location":"ru/EXAMPLES/#typescript","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 TypeScript","text":"<pre><code>import axios, { AxiosInstance } from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Contact {\n    phone: string;\n    tags: string[];\n    additionalFields: Record&lt;string, any&gt;;\n}\n\ninterface ImportResponse {\n    job_id: string;\n    correlation_id: string;\n    idempotency_status: string;\n    status: string;\n    total_contacts: number;\n    valid_contacts: number;\n    invalid_contacts: number;\n    chunks_count: number;\n    created_at: string;\n}\n\nclass SyncClient {\n    private client: AxiosInstance;\n\n    constructor(apiKey: string, baseURL: string = 'https://import-api.liddex.ru') {\n        this.client = axios.create({\n            baseURL,\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000,\n        });\n    }\n\n    async importContacts(contacts: Contact[]): Promise&lt;ImportResponse&gt; {\n        const response = await this.client.post&lt;ImportResponse&gt;(\n            '/v1/contacts/import',\n            contacts,\n            {\n                headers: {\n                    'Idempotency-Key': uuidv4(),\n                },\n            }\n        );\n        return response.data;\n    }\n\n    async getJobStatus(jobId: string): Promise&lt;any&gt; {\n        const response = await this.client.get(`/v1/contacts/import/${jobId}`);\n        return response.data;\n    }\n}\n\n// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nconst client = new SyncClient('\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447');\n\nconst contacts: Contact[] = [\n    {\n        phone: '+79001234567',\n        tags: ['\u0442\u0435\u0441\u0442'],\n        additionalFields: { source: 'typescript' },\n    }\n];\n\nclient.importContacts(contacts)\n    .then(result =&gt; console.log('ID \u0437\u0430\u0434\u0430\u0447\u0438:', result.job_id))\n    .catch(error =&gt; console.error('\u041e\u0448\u0438\u0431\u043a\u0430:', error.message));\n</code></pre>"},{"location":"ru/EXAMPLES/#curl","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 cURL","text":""},{"location":"ru/EXAMPLES/#_7","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0438\u043c\u043f\u043e\u0440\u0442","text":"<pre><code>#!/bin/bash\n\nAPI_KEY=\"\u0432\u0430\u0448-api-\u043a\u043b\u044e\u0447\"\nBASE_URL=\"https://import-api.liddex.ru\"\nIDEMPOTENCY_KEY=$(uuidgen)\n\ncurl -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: ${IDEMPOTENCY_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[\n    {\n      \"phone\": \"+79001234567\",\n      \"tags\": [\"\u043b\u0438\u0434\", \"\u0441\u0430\u0439\u0442\"],\n      \"additionalFields\": {\n        \"source\": \"landing\",\n        \"campaign\": \"summer2024\"\n      }\n    }\n  ]'\n</code></pre>"},{"location":"ru/EXAMPLES/#id","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 ID \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430","text":"<pre><code>#!/bin/bash\n\n# \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 ID \u0437\u0430\u0434\u0430\u0447\u0438\nRESPONSE=$(curl -s -X POST \"${BASE_URL}/v1/contacts/import\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" \\\n  -H \"Idempotency-Key: $(uuidgen)\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '[{\"phone\": \"+79001234567\", \"tags\": [], \"additionalFields\": {}}]')\n\nJOB_ID=$(echo $RESPONSE | jq -r '.job_id')\necho \"ID \u0437\u0430\u0434\u0430\u0447\u0438: $JOB_ID\"\n\n# \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430\nsleep 5\n\ncurl -s -X GET \"${BASE_URL}/v1/contacts/import/${JOB_ID}\" \\\n  -H \"Authorization: Bearer ${API_KEY}\" | jq\n</code></pre>"},{"location":"ru/EXAMPLES/#_8","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"ru/EXAMPLES/#python_1","title":"Python","text":"<pre><code>from httpx import HTTPStatusError\n\nasync def import_with_error_handling(contacts: list[dict]) -&gt; dict:\n    try:\n        return await import_contacts(contacts)\n    except HTTPStatusError as e:\n        if e.response.status_code == 400:\n            print(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:\", e.response.json())\n        elif e.response.status_code == 401:\n            print(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 - \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 API \u043a\u043b\u044e\u0447\")\n        elif e.response.status_code == 422:\n            print(\"\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 - \u043a\u043b\u044e\u0447 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\")\n        elif e.response.status_code == 429:\n            print(\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 - \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435\")\n        else:\n            print(f\"\u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430: {e.response.status_code}\")\n        raise\n</code></pre>"},{"location":"ru/EXAMPLES/#javascript","title":"JavaScript","text":"<pre><code>async function importWithErrorHandling(contacts) {\n    try {\n        return await importContacts(contacts);\n    } catch (error) {\n        if (error.response) {\n            const status = error.response.status;\n            const data = error.response.data;\n\n            switch (status) {\n                case 400:\n                    console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:', data);\n                    break;\n                case 401:\n                    console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 - \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 API \u043a\u043b\u044e\u0447');\n                    break;\n                case 422:\n                    console.error('\u041a\u043e\u043d\u0444\u043b\u0438\u043a\u0442 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438:', data);\n                    break;\n                case 429:\n                    console.error('\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 - \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0436\u0435');\n                    break;\n                default:\n                    console.error(`\u041d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430: ${status}`, data);\n            }\n        } else {\n            console.error('\u0421\u0435\u0442\u0435\u0432\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430:', error.message);\n        }\n        throw error;\n    }\n}\n</code></pre>"},{"location":"ru/EXAMPLES/#_9","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"ru/EXAMPLES/#_10","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<pre><code>async def import_in_batches(\n    all_contacts: list[dict],\n    batch_size: int = 1000,\n) -&gt; list[str]:\n    \"\"\"\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438.\"\"\"\n    job_ids = []\n\n    for i in range(0, len(all_contacts), batch_size):\n        batch = all_contacts[i:i + batch_size]\n        result = await import_contacts(batch)\n        job_ids.append(result['job_id'])\n\n        print(f\"\u041f\u0430\u043a\u0435\u0442 {i // batch_size + 1}: \u0417\u0430\u0434\u0430\u0447\u0430 {result['job_id']}\")\n\n        # \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b\n        await asyncio.sleep(0.5)\n\n    return job_ids\n</code></pre>"},{"location":"ru/EXAMPLES/#_11","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430","text":"<pre><code>async def monitor_jobs(job_ids: list[str]) -&gt; dict:\n    \"\"\"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n    results = {\"completed\": 0, \"failed\": 0, \"pending\": 0}\n\n    async with httpx.AsyncClient() as client:\n        for job_id in job_ids:\n            response = await client.get(\n                f\"{BASE_URL}/v1/contacts/import/{job_id}\",\n                headers={\"Authorization\": f\"Bearer {API_KEY}\"},\n            )\n            status = response.json()\n\n            if status[\"status\"] == \"completed\":\n                results[\"completed\"] += 1\n            elif status[\"status\"] == \"failed\":\n                results[\"failed\"] += 1\n            else:\n                results[\"pending\"] += 1\n\n    return results\n</code></pre>"},{"location":"ru/EXAMPLES/#_12","title":"\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0442\u0430\u043a\u0436\u0435","text":"<ul> <li>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e API - \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e API</li> <li>\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 - \u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0435\u0442\u0430\u043b\u0438</li> </ul>"}]}